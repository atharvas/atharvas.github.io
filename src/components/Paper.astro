---
/* Paper.astro */
import Card from './Card.astro';
import Link from './Link.astro';

/* Data interfaces for your content: */
interface PaperItem {
  hide: boolean;
  title: string;
  url: string;
  authors: string;
  date: string;
  venue: string;
  description: string;
  links: { name: string, url: string }[];
  image: string;
  alt?: string;
}

/* A simple key-value object for author names → website URLs: */
interface BioLinks {
  [authorName: string]: string;
}

/* Props for this component will now include BioLinks as well: */
interface Props {
  items: PaperItem[];
  BioLinks: BioLinks;
}

const { items, BioLinks } = Astro.props;

/**
 * parseAuthors(authors: string)
 * 
 * Splits a string of comma-separated authors, trims each name,
 * converts trailing '*' into a superscript, underscores into bold,
 * and wraps the author in a link if their name is found in BioLinks.
 */
function parseAuthors(authors: string): string {
  let authorsList = authors.split(',').map((author) => author.trim());

  authorsList = authorsList.map((author) => {
    // For link lookups, remove the markup from the author's name:
    const strippedName = author
      .replace(/_(.*?)_/g, '$1')   // remove underscores
      .replace(/\*(.*?)\*/g, '$1') // remove asterisks
      .replace(/(.*?)\*/g, '$1') // remove asterisks
      .trim();

    // Perform the existing bold/superscript replacements
    let displayAuthor = author;
    const boldRegex = /_(.*?)_/g;
    const superscriptRegex = /\*(.*?)\*/g;

    let boldMatch = boldRegex.exec(displayAuthor);
    while (boldMatch) {
      displayAuthor = displayAuthor.replace(
        boldMatch[0],
        `<span class="font-bold">${boldMatch[1]}</span>`
      );
      boldMatch = boldRegex.exec(displayAuthor);
    }

    let superscriptMatch = superscriptRegex.exec(displayAuthor);
    while (superscriptMatch) {
      displayAuthor = displayAuthor.replace(
        superscriptMatch[0],
        `<sup>${superscriptMatch[1]}</sup>`
      );
      superscriptMatch = superscriptRegex.exec(displayAuthor);
    }

    // If the stripped name is in BioLinks, wrap with <a>
    if (BioLinks[strippedName]) {
      const link = BioLinks[strippedName];
      return `<a href="${link}" target="_blank" rel="noopener noreferrer">${displayAuthor}</a>`;
    } else {
      // No link found, just return the display text
      return displayAuthor;
    }
  });

  // Join them all back with commas
  return authorsList.join(', ');
}

function parseVenue(venue: string): string {
  // Reuse the logic from the parseAuthors function
  // to implement the same bold/superscript replacements
  // Venue information is split using | instead of ,
  let venueList = venue.split('|').map((venue) => venue.trim());

  venueList = venueList.map((venue) => {
    // For link lookups, remove the markup from the author's name:
    const strippedName = venue
      .replace(/_(.*?)_/g, '$1')   // remove underscores
      .replace(/\*(.*?)\*/g, '$1') // remove asterisks
      .replace(/(.*?)\*/g, '$1') // remove asterisks
      .trim();

    // Perform the existing bold/superscript replacements
    let displayVenue = venue;
    const boldRegex = /_(.*?)_/g;
    const superscriptRegex = /\*(.*?)\*/g;

    let boldMatch = boldRegex.exec(displayVenue);
    while (boldMatch) {
      displayVenue = displayVenue.replace(
        boldMatch[0],
        `<span class="font-bold">${boldMatch[1]}</span>`
      );
      boldMatch = boldRegex.exec(displayVenue);
    }

    let superscriptMatch = superscriptRegex.exec(displayVenue);
    while (superscriptMatch) {
      displayVenue = displayVenue.replace(
        superscriptMatch[0],
        `<sup>${superscriptMatch[1]}</sup>`
      );
      superscriptMatch = superscriptRegex.exec(displayVenue);
    }

    return displayVenue;
  });

  return venueList.join(' | ');
}

// Separate the items into visible and hidden for the “More projects” toggle
const visibleItems = items.filter(item => !item.hide);
const hiddenItems = items.filter(item => item.hide);
---

<section class="mt-20 mb-10">
  <div class="mb-5">
    <h1 class="font-bold text-3xl">Research projects</h1>
    <p class="leading-8 text-gray-600">
      For a complete list, consult
      <Link href="https://scholar.google.com/citations?user=dj1yDdIAAAAJ&hl=en">Google Scholar</Link>
    </p>
    <p class="leading-8 text-gray-600">* denotes equal contribution</p>
  </div>

  {/* Render visible items */}
  {visibleItems.map(item => (
    <Card
      title={item.title}
      url={item.url}
      authors={parseAuthors(item.authors)}
      date={item.date}
      venue={parseVenue(item.venue)}
      description={item.description}
      links={item.links}
      image={item.image}
      alt={item.alt ?? ""}
    />
  ))}

  {/* If there are any hidden items, render the toggle button and hidden items container */}
  {hiddenItems.length > 0 && (
    <div>
      <button id="toggle-hidden" class="flex items-center mt-2 focus:outline-none">
        <svg id="dropdown-icon" class="w-6 h-6 transform transition-transform duration-200"
             xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
             stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M19 9l-7 7-7-7" />
        </svg>
        <span class="ml-2">More projects</span>
      </button>
      <div id="hidden-items" class="hidden">
        {hiddenItems.map(item => (
          <Card
            title={item.title}
            url={item.url}
            authors={parseAuthors(item.authors)}
            date={item.date}
            venue={parseVenue(item.venue)}
            description={item.description}
            links={item.links}
            image={item.image}
            alt={item.alt ?? ""}
          />
        ))}
      </div>
    </div>
  )}
</section>

<script>
  const toggleButton = document.getElementById('toggle-hidden');
  const hiddenContainer = document.getElementById('hidden-items');
  const dropdownIcon = document.getElementById('dropdown-icon');

  if (toggleButton) {
    const toggleText = toggleButton.querySelector('span');
    toggleButton.addEventListener('click', () => {
      if (!hiddenContainer || !dropdownIcon || !toggleText) return;
      const isHidden = hiddenContainer.classList.contains('hidden');

      if (isHidden) {
        hiddenContainer.classList.remove('hidden');
        dropdownIcon.classList.add('rotate-180');
        toggleText.textContent = 'Less projects';
      } else {
        hiddenContainer.classList.add('hidden');
        dropdownIcon.classList.remove('rotate-180');
        toggleText.textContent = 'More projects';
      }
    });
  } else {
    console.warn("Toggle button with ID 'toggle-hidden' not found.");
  }
</script>
